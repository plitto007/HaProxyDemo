#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.6/doc/configuration.txt
#   https://cbonte.github.io/haproxy-dconv/1.6/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    # daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode	http
    log                     global
    #option                  httplog
    option                  dontlognull
    #option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend http-frontend
    bind *:80
    timeout client 15m
    mode http
    #timeout server 2m
    #timeout connect 1m
    reqadd X-Forwarded-Proto:\ http
    #acl host_polsat_sport hdr(host) -i app.polsatsport.pl
    #acl host_polsat_news hdr(host) -i app.polsatnews.pl
    #use_backend wwwbackend if host_polsat_sport
    #use_backend wwwbackend3 if host_polsat_news
    #default_backend wwwbackend
    balance roundrobin
    server 1-www 192.168.1.53:81 check
    server 2-www 192.168.1.53:82 check

backend wwwbackend
    server 1-www 192.168.1.53:81 check
    timeout connect 15m
    timeout server 17m

    #timeout client 1m

backend wwwbackend3
    server 1-www 192.168.1.53:82 check
    timeout connect 5m
    timeout server 7m

    #timeout client 1m

frontend https-frontend
    bind *:443
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    acl host_polsat_news req.ssl_sni -i app.polsatnews.pl
    use_backend wwwbackend4 if host_polsat_news
    default_backend wwwbackend2
    #timeout connect 30s
    #timeout server 1m

    timeout client 9m

backend wwwbackend2
    mode	tcp
    option ssl-hello-chk
    server web01 192.168.1.53:444 check
    timeout connect 15m
    timeout server 17m

    #timeout client 1m

backend wwwbackend4
    mode	tcp
    option ssl-hello-chk
    server web02 192.168.1.53:445 check
    timeout connect 15m
    timeout server 17m